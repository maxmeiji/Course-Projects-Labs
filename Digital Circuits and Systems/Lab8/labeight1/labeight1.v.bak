module labeight1(SW,KEY,LEDR);
	input [1:0]SW,KEY;
	output [9:0]LEDR;
	wire [8:0]y;
	wire w;
	assign w=SW[1];
	assign LEDR[8:0]=y;
	assign LEDR[9]=(y[4]|y[8]);
	dff0 d0(~KEY[0],SW[0],0,y[0]);
	d_flip_flop d1(~KEY[0],SW[0],(~w)&(y[0]|y[5]|y[6]|y[7]|y[8]),y[1]);
	d_flip_flop d2(~KEY[0],SW[0],(~w)&(y[1]),y[2]);
	d_flip_flop d3(~KEY[0],SW[0],(~w)&(y[2]),y[3]);
	d_flip_flop d4(~KEY[0],SW[0],(~w)&(y[3]|y[4]),y[4]);
	d_flip_flop d5(~KEY[0],SW[0],(w)&(y[0]|y[1]|y[2]|y[3]|y[4]),y[5]);
	d_flip_flop d6(~KEY[0],SW[0],(w)&(y[5]),y[6]);
	d_flip_flop d7(~KEY[0],SW[0],(w)&(y[6]),y[7]);
	d_flip_flop d8(~KEY[0],SW[0],(w)&(y[7]|y[8]),y[8]);
endmodule
module d_flip_flop(clk,rst,D,Q);
	input D,clk,rst;
	output reg Q;
	always@(posedge clk or negedge rst)
	begin
	if(!rst)
		Q<=1'b0;
	else
		Q<=D;
	end
endmodule
module dff0(clk,reset,D,Q);
	input D,clk,reset;
	output reg Q;
	always@(posedge clk or negedge reset)
	begin
		if(~reset)
			Q<=1'b1;
		else
			Q<=D;
	end
endmodule